// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.2
// source: proto/contract_request_group/contract_request_group.proto

package contract_request_group

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ContractRequestGroup_ServiceClient is the client API for ContractRequestGroup_Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContractRequestGroup_ServiceClient interface {
	GetGroupDetails(ctx context.Context, in *GetGroupDetailsRequest, opts ...grpc.CallOption) (*GetGroupDetailsResponse, error)
	GetRequestDetails(ctx context.Context, in *GetWithdrawsRequest, opts ...grpc.CallOption) (*GetWithdrawsResponse, error)
	GetContractDetails(ctx context.Context, in *GetContractRequest, opts ...grpc.CallOption) (*GetContractResponse, error)
}

type contractRequestGroup_ServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewContractRequestGroup_ServiceClient(cc grpc.ClientConnInterface) ContractRequestGroup_ServiceClient {
	return &contractRequestGroup_ServiceClient{cc}
}

func (c *contractRequestGroup_ServiceClient) GetGroupDetails(ctx context.Context, in *GetGroupDetailsRequest, opts ...grpc.CallOption) (*GetGroupDetailsResponse, error) {
	out := new(GetGroupDetailsResponse)
	err := c.cc.Invoke(ctx, "/contract_request_group.ContractRequestGroup_Service/GetGroupDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contractRequestGroup_ServiceClient) GetRequestDetails(ctx context.Context, in *GetWithdrawsRequest, opts ...grpc.CallOption) (*GetWithdrawsResponse, error) {
	out := new(GetWithdrawsResponse)
	err := c.cc.Invoke(ctx, "/contract_request_group.ContractRequestGroup_Service/GetRequestDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contractRequestGroup_ServiceClient) GetContractDetails(ctx context.Context, in *GetContractRequest, opts ...grpc.CallOption) (*GetContractResponse, error) {
	out := new(GetContractResponse)
	err := c.cc.Invoke(ctx, "/contract_request_group.ContractRequestGroup_Service/GetContractDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContractRequestGroup_ServiceServer is the server API for ContractRequestGroup_Service service.
// All implementations must embed UnimplementedContractRequestGroup_ServiceServer
// for forward compatibility
type ContractRequestGroup_ServiceServer interface {
	GetGroupDetails(context.Context, *GetGroupDetailsRequest) (*GetGroupDetailsResponse, error)
	GetRequestDetails(context.Context, *GetWithdrawsRequest) (*GetWithdrawsResponse, error)
	GetContractDetails(context.Context, *GetContractRequest) (*GetContractResponse, error)
	mustEmbedUnimplementedContractRequestGroup_ServiceServer()
}

// UnimplementedContractRequestGroup_ServiceServer must be embedded to have forward compatible implementations.
type UnimplementedContractRequestGroup_ServiceServer struct {
}

func (UnimplementedContractRequestGroup_ServiceServer) GetGroupDetails(context.Context, *GetGroupDetailsRequest) (*GetGroupDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupDetails not implemented")
}
func (UnimplementedContractRequestGroup_ServiceServer) GetRequestDetails(context.Context, *GetWithdrawsRequest) (*GetWithdrawsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRequestDetails not implemented")
}
func (UnimplementedContractRequestGroup_ServiceServer) GetContractDetails(context.Context, *GetContractRequest) (*GetContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContractDetails not implemented")
}
func (UnimplementedContractRequestGroup_ServiceServer) mustEmbedUnimplementedContractRequestGroup_ServiceServer() {
}

// UnsafeContractRequestGroup_ServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContractRequestGroup_ServiceServer will
// result in compilation errors.
type UnsafeContractRequestGroup_ServiceServer interface {
	mustEmbedUnimplementedContractRequestGroup_ServiceServer()
}

func RegisterContractRequestGroup_ServiceServer(s grpc.ServiceRegistrar, srv ContractRequestGroup_ServiceServer) {
	s.RegisterService(&ContractRequestGroup_Service_ServiceDesc, srv)
}

func _ContractRequestGroup_Service_GetGroupDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContractRequestGroup_ServiceServer).GetGroupDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contract_request_group.ContractRequestGroup_Service/GetGroupDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContractRequestGroup_ServiceServer).GetGroupDetails(ctx, req.(*GetGroupDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContractRequestGroup_Service_GetRequestDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWithdrawsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContractRequestGroup_ServiceServer).GetRequestDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contract_request_group.ContractRequestGroup_Service/GetRequestDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContractRequestGroup_ServiceServer).GetRequestDetails(ctx, req.(*GetWithdrawsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContractRequestGroup_Service_GetContractDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContractRequestGroup_ServiceServer).GetContractDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contract_request_group.ContractRequestGroup_Service/GetContractDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContractRequestGroup_ServiceServer).GetContractDetails(ctx, req.(*GetContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ContractRequestGroup_Service_ServiceDesc is the grpc.ServiceDesc for ContractRequestGroup_Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContractRequestGroup_Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "contract_request_group.ContractRequestGroup_Service",
	HandlerType: (*ContractRequestGroup_ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGroupDetails",
			Handler:    _ContractRequestGroup_Service_GetGroupDetails_Handler,
		},
		{
			MethodName: "GetRequestDetails",
			Handler:    _ContractRequestGroup_Service_GetRequestDetails_Handler,
		},
		{
			MethodName: "GetContractDetails",
			Handler:    _ContractRequestGroup_Service_GetContractDetails_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/contract_request_group/contract_request_group.proto",
}
